import { LottiePlayer, AnimationConfig } from "lottie-web";
import { ITrigger } from "../interfaces.js";
declare type SUPPORTED_ATTRIBUTES = "colors" | "stroke" | "scale" | "axis-x" | "axis-y" | "src" | "icon" | "trigger" | "speed" | "target";
export declare class Element extends HTMLElement {
    protected isReady: boolean;
    protected root: ShadowRoot;
    protected lottie?: LottiePlayer;
    protected myConnectedTrigger?: ITrigger;
    protected icon?: string;
    protected src?: string;
    protected colors?: string;
    protected trigger?: string;
    protected speed?: string;
    protected stroke?: string;
    protected scale?: string;
    protected ["axis-x"]?: string;
    protected ["axis-y"]?: string;
    protected target?: string;
    /**
     * Register Lottie library.
     * @param loader Provide "loadAnimation" here from Lottie.
     */
    static registerLoader(loader: (params: AnimationConfig) => LottiePlayer): void;
    /**
     * Register supported icon.
     * @param name
     * @param data
     */
    static registerIcon(name: string, data: any): void;
    /**
     * Register supported animation.
     * @param name
     * @param triggerClass
     */
    static registerTrigger(name: string, triggerClass: any): void;
    constructor();
    /**
     * Element connected.
     */
    protected connectedCallback(): void;
    /**
     * Element disconnected.
     */
    protected disconnectedCallback(): void;
    protected attributeChangedCallback(name: SUPPORTED_ATTRIBUTES, oldValue: any, newValue: any): void;
    protected init(): void;
    protected registerLottie(): void;
    protected unregisterLottie(): void;
    protected notify(name: string, from: "icon" | "trigger"): void;
    protected triggerChanged(): void;
    protected colorsChanged(): void;
    protected strokeChanged(): void;
    protected scaleChanged(): void;
    protected axisXChanged(): void;
    protected axisYChanged(): void;
    protected speedChanged(): void;
    protected iconChanged(): void;
    protected srcChanged(): Promise<void>;
    /**
     * Acces icon data for this element.
     */
    get iconData(): any;
    /**
     * Access current trigger instance.
     */
    get connectedTrigger(): ITrigger | undefined;
    protected get container(): HTMLElement | undefined;
    protected get animationSpeed(): number;
    protected static get observedAttributes(): string[];
}
export {};
